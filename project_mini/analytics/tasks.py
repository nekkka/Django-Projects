import csv
import os
from celery import shared_task
from django.utils.timezone import now
from django.conf import settings
from .models import AnalyticsReport
from trading.models import Order
from django.core.files import File
from reportlab.pdfgen import canvas
from decimal import Decimal
from django.contrib.auth import get_user_model
from fpdf import FPDF 
from notifications.models import Notification

User = get_user_model()

@shared_task(bind=True)
def generate_trading_report(self, user_id):
    user = User.objects.get(id=user_id)

    # Папка для сохранения отчётов
    reports_dir = os.path.join(settings.MEDIA_ROOT, 'reports')
    os.makedirs(reports_dir, exist_ok=True)  # Создаём папку, если её нет

    # Генерируем путь для сохранения файла отчёта
    report_filename = f"report_{self.request.id}.pdf"  # Уникальное имя по task_id
    report_path = os.path.join(reports_dir, report_filename)

    
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Trading Report", ln=True, align='C')
    pdf.cell(200, 10, txt=f"Generated by: {user.username}", ln=True, align='L')
    pdf.output(report_path)  

  
    report = AnalyticsReport.objects.create(
        task_id=self.request.id,
        generated_by=user,
        file=f"reports/{report_filename}" 
    )

    Notification.objects.create(
        user=user,
        notification_type='push',
        message='Ваш отчёт по торговле готов и доступен для скачивания.'
    )

    return {"message": "Trading report generated!", "report_id": report.id}







@shared_task(bind=True)
def generate_profit_loss_report(self, user_id):
    file_name = f"profit_loss_report_{now().strftime('%Y%m%d_%H%M%S')}.pdf"
    file_path = os.path.join(settings.MEDIA_ROOT, 'reports', file_name)

    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    c = canvas.Canvas(file_path)
    c.drawString(100, 800, "Profit/Loss Report")

    total_revenue = sum(order.price * order.quantity for order in Order.objects.all())

    total_cost = sum(order.quantity * order.price * Decimal('0.7') for order in Order.objects.all())

    profit_loss = total_revenue - total_cost

    c.drawString(100, 770, f"Total Revenue: {total_revenue}")
    c.drawString(100, 750, f"Total Cost: {total_cost}")
    c.drawString(100, 730, f"Profit/Loss: {profit_loss}")

    c.save()

    report = AnalyticsReport.objects.create(
        report_type='profit_loss',
        file=f"reports/{file_name}",
        generated_by_id=user_id,
        task_id=self.request.id 
    )

    user = User.objects.get(id=user_id)  
    Notification.objects.create(
        user=user,
        notification_type='push',
        message='Ваш отчёт по прибыли и убыткам готов и доступен для скачивания.'
    )

    return {"message": "Report generated", "task_id": self.request.id}
